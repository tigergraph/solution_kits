# 1. Create graph
CREATE GRAPH Transaction_Fraud ()

# 2. Create schema_change job
CREATE SCHEMA_CHANGE JOB change_schema_of_Transaction_Fraud FOR GRAPH Transaction_Fraud {

  ADD VERTEX Community(PRIMARY_ID cid UINT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Address(PRIMARY_ID address STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX City(PRIMARY_ID city STRING, population INT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Merchant(PRIMARY_ID id STRING, pagerank FLOAT, c_id INT, c_size INT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX State(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Zipcode(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Payment_Transaction(PRIMARY_ID id STRING, transaction_time DATETIME, amount DOUBLE, is_fraud INT, unix_time UINT, shortest_path_length INT, max_txn_amt_interval FLOAT, max_txn_cnt_interval INT, cnt_repeated_card INT, com_mer_txn_cnt INT, com_mer_txn_total_amt FLOAT, com_mer_txn_avg_amt FLOAT, com_mer_txn_max_amt FLOAT, com_mer_txn_min_amt FLOAT, com_cd_txn_cnt INT, com_cd_txn_total_amt FLOAT, com_cd_txn_avg_amt FLOAT, com_cd_txn_max_amt FLOAT, com_cd_txn_min_amt FLOAT, indegree INT, outdegree INT, mer_cat STRING, mer_cat_cnt INT, mer_cat_total_amt FLOAT, mer_cat_avg_amt FLOAT, mer_cat_max_amt FLOAT, mer_cat_min_amt FLOAT, mer_pagerank FLOAT, cd_pagerank FLOAT, mer_com_size INT, cd_com_size INT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Card(PRIMARY_ID card_number INT, is_fraud INT, card_type STRING, pagerank FLOAT, c_id INT, c_size INT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Merchant_Category(PRIMARY_ID category STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Party(PRIMARY_ID id STRING, is_fraud INT, gender STRING, dob DATETIME, party_type STRING, name STRING, created_at UINT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Phone(PRIMARY_ID phone_number STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Email(PRIMARY_ID email STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX IP(PRIMARY_ID id STRING, is_blocked BOOL) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Device(PRIMARY_ID id STRING, is_blocked BOOL) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX ID(PRIMARY_ID id STRING, id_type STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX Full_Name(PRIMARY_ID name STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX DOB(PRIMARY_ID dob DATETIME) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";

  ADD UNDIRECTED EDGE Merchant_Merchant(FROM Merchant, TO Merchant, weight FLOAT);
  ADD UNDIRECTED EDGE Merchant_Receive_Transaction(FROM Payment_Transaction, TO Merchant);
  ADD UNDIRECTED EDGE Card_Send_Transaction(FROM Payment_Transaction, TO Card);
  ADD UNDIRECTED EDGE Card_Card(FROM Card, TO Card, weight INT);
  ADD UNDIRECTED EDGE Merchant_Assigned(FROM Merchant, TO Merchant_Category);
  ADD DIRECTED EDGE Is_SubCategory(FROM Merchant_Category, TO Merchant_Category) WITH REVERSE_EDGE="reverse_Is_SubCategory";
 
  ADD UNDIRECTED EDGE Has_Interaction_With_Merchant(FROM Card, TO Merchant);
  ADD UNDIRECTED EDGE Has_Address(FROM Address, TO Party);
  ADD UNDIRECTED EDGE Is_Merchant(FROM Merchant, TO Party);
  ADD UNDIRECTED EDGE Party_Has_Card(FROM Party, TO Card);
  ADD UNDIRECTED EDGE Has_Phone(FROM Party, TO Phone);
  ADD UNDIRECTED EDGE Has_Email(FROM Party, TO Email);
  ADD UNDIRECTED EDGE Has_Community(FROM Party, TO Community|FROM Merchant, TO Community|FROM Card, TO Community);
  ADD UNDIRECTED EDGE Has_ID(FROM Party, TO ID);
  ADD UNDIRECTED EDGE Has_IP(FROM Party, TO IP);
  ADD UNDIRECTED EDGE Has_Device(FROM Party, TO Device);
  ADD UNDIRECTED EDGE Assigned_To(FROM Address, TO Zipcode|FROM Zipcode, TO City);
  ADD UNDIRECTED EDGE Located_In(FROM Address, TO City|FROM City, TO State);
  ADD UNDIRECTED EDGE Has_DOB(FROM Party, TO DOB);
  ADD UNDIRECTED EDGE Has_Full_Name(FROM Party, TO Full_Name);

 
  
}

# 3. Run schema_change job
RUN SCHEMA_CHANGE JOB change_schema_of_Transaction_Fraud

# 4. Drop schema_change job
DROP JOB change_schema_of_Transaction_Fraud





  